Un serveur HTTP en C++ est un programme qui écoute les connexions entrantes sur un port spécifique (généralement le port 80 pour les requêtes HTTP),
traite les requêtes HTTP reçues, et renvoie les réponses HTTP appropriées.

Voici les étapes générales pour implémenter un serveur HTTP en C++ :

Créez un socket serveur en utilisant la fonction socket() de la bibliothèque de sockets, spécifiez l'adresse IP et le port sur lesquels vous souhaitez écouter les connexions entrantes à l'aide de la fonction bind() et écoutez les connexions entrantes à l'aide de la fonction listen().

Acceptez les connexions entrantes en utilisant la fonction accept() de la bibliothèque de sockets. Cette fonction retourne un nouveau socket qui sera utilisé pour communiquer avec le client.

Recevez les requêtes HTTP à l'aide de la fonction recv() et analysez-les pour extraire les informations pertinentes, telles que la méthode HTTP (GET, POST, etc.), l'URL et les en-têtes.

Traitez la requête en fonction des informations extraites et générez une réponse appropriée en utilisant la fonction send() pour envoyer la réponse au client.

Fermez le socket client et retournez en mode d'écoute pour de nouvelles connexions entrantes.

Répétez les étapes 2 à 5 pour chaque connexion entrante.

----------------------------------------------------------------------------------------------------------------------------------

execve() : exécute un programme avec un ensemble de paramètres et un environnement définis.
Cette fonction est utile pour exécuter un programme externe à partir d'un programme en cours d'exécution.

dup() et dup2() : dupliquent un descripteur de fichier existant.
dup() crée une copie d'un descripteur de fichier existant, en utilisant le plus petit numéro de descripteur disponible.
dup2() fait la même chose, mais permet à l'utilisateur de spécifier le numéro de descripteur de fichier à utiliser.

pipe() : crée une paire de descripteurs de fichiers pour une communication unidirectionnelle entre processus.
Les données écrites dans un descripteur de fichier peuvent être lues depuis l'autre.

strerror() et gai_strerror() : renvoient une chaîne de caractères décrivant une erreur système ou réseau.
strerror() prend en argument un code d'erreur et renvoie une chaîne de caractères décrivant l'erreur correspondante.
gai_strerror() prend en argument un code d'erreur d'adressage et renvoie une chaîne de caractères décrivant l'erreur correspondante.

errno : variable globale qui contient le dernier code d'erreur de la dernière opération système.
Cette variable peut être utilisée pour récupérer le code d'erreur renvoyé par une fonction système.

fork() : crée un nouveau processus en dupliquant le processus existant.
Le nouveau processus est identique au processus parent, à l'exception de son identifiant de processus (PID) et de son identifiant de groupe de processus (PGID).
Le processus parent et le nouveau processus continuent l'exécution à partir du point d'appel de la fonction fork().

htonl(), htons(), ntohl() et ntohs() : convertissent des entiers entre l'ordre des octets d'hôte et l'ordre des octets du réseau.
Ces fonctions sont nécessaires pour convertir les entiers lors de la communication via le réseau.

select(), poll() et epoll() : sont des mécanismes de gestion d'événements pour les sockets.
Ces fonctions sont utilisées pour surveiller plusieurs sockets en même temps, en attendant qu'un ou plusieurs événements se produisent.

socket() : crée un nouveau socket.
Les sockets sont des canaux de communication bidirectionnels utilisés pour la communication entre processus sur un réseau.

accept() : accepte une nouvelle connexion sur un socket.
Lorsqu'un client se connecte à un serveur, le serveur appelle la fonction accept() pour accepter la connexion.

listen() : met un socket en mode écoute des connexions entrantes.
Cette fonction est appelée sur un socket côté serveur pour spécifier le nombre maximal de connexions en attente de traitement.

send() et recv() : envoient et reçoivent des données sur un socket.
Ces fonctions sont utilisées pour envoyer et recevoir des données sur un socket.

bind() : attache un socket à une adresse IP et à un port.
Cette fonction est utilisée pour spécifier l'adresse IP et le port sur lequel le socket doit écouter les conn
